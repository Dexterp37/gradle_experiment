plugins {
    id "com.jetbrains.python.envs" version "0.0.25"
}

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.alessio.gradlebuildpython"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:support-vector-drawable:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

// Configure the Python environments
envs {
    bootstrapDirectory = new File(buildDir, 'bootstrap')
    envsDirectory = new File(buildDir, 'envs')

    // Setup a miniconda environment.
    conda "Miniconda3", "Miniconda3-latest", "64", ["python-mozparsers==1.*"]
}

// Setup the python environment before the build starts.

task createBuildDir {
    description = "Make sure the build dir exists before creating the Python Environments"
    onlyIf {
        !file(buildDir).exists()
    }
    doLast {
        println "Creating build directory:" + buildDir.getPath()
        buildDir.mkdir()
    }
}

// Make sure that a build directory exists before attempting to download
// the Python environment in the preBuild step. This will fail if the directory
// doesn't exist.
preBuild.mustRunAfter(createBuildDir)
preBuild.dependsOn("build_envs")

// Generate the Metrics API
task generateMetricsSource {
    description = "Generate the Kotlin code for the Metrics API"
    doLast {
        println("Calling python to generate stuff")
        def script = "$buildDir/bootstrap/Miniconda3/python parsers/parser.py metrics.yaml".execute()
        script.in.eachLine {line -> println line}
        script.err.eachLine {line -> println "ERROR: " + line}
        script.waitFor()
    }
}


android.applicationVariants.all { variant ->
    println("Test")//variant.build.dependsOn generateMetricsSource
}
/*
task generateMetricsSources(type: Exec) {
    description = "Generating sources"
    doLast {
        def script = "$buildDir/bootstrap/Miniconda3/python parsers/parser.py metrics.yaml".execute()
        script.in.eachLine {line -> println line}
        script.err.eachLine {line -> println "ERROR: " + line}
        script.waitFor()
        println ' Generate sourcess!?'
    }
}*/